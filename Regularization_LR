{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of ECE_CS_5424_Assignment_2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mh6N3SPWUSMB"
      },
      "source": [
        "\n",
        "# **Logistic Regression and Regularization**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MIA3Hv8kUSMZ"
      },
      "source": [
        "In this assignment, you need to complete the following two sections:\n",
        "1. Logistic regression\n",
        "2. Regularization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d4K3x2x_USMd"
      },
      "source": [
        "### Please Write Your VT PID Here: 906388880"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G7vN9PE-ZFvg"
      },
      "source": [
        "## Environment Set Up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Pja5zjFXwTp"
      },
      "source": [
        "Mount your google drive in google colab"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mdVPU9EUXvij",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf1f52d4-5e7c-4702-9da7-fc4a78f8b6f8"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive/', force_remount=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OyBHckMZns_3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c82ae04-6034-48ef-f53a-23c4bd48d939"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HwSblWSIX-qM"
      },
      "source": [
        "import sys\n",
        "import os\n",
        "\n",
        "\n",
        "customized_path_to_your_file = '/content/gdrive/MyDrive/your_file'\n",
        "sys.path.append(customized_path_to_your_file)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dXkxh1F0USP7"
      },
      "source": [
        "## Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l3m-u3V1Xi6t"
      },
      "source": [
        "import os\n",
        "logistic_x_data_path = os.path.join(customized_path_to_your_data, 'data/logistic_x_.txt')\n",
        "logistic_y_data_path = os.path.join(customized_path_to_your_data, 'data/logistic_y_.txt')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Op9aacdfWjBH"
      },
      "source": [
        "def feature_normalize(X):\n",
        "    mu     = 0\n",
        "    sigma  = 0\n",
        "    mu     = np.mean(X, 0)\n",
        "    sigma  = np.std(X, 0)\n",
        "    X      = (X - mu) / sigma\n",
        "    X_norm = X\n",
        "  \n",
        "    return X_norm, mu, sigma"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SJJmpMWsUSP9"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "X = np.loadtxt(logistic_x_data_path) \n",
        "y = np.loadtxt(logistic_y_data_path).reshape(-1, 1) \n",
        "\n",
        "X, mu, std = feature_normalize(X)\n",
        "\n",
        "# Add a column of ones to X for the bias weight.\n",
        "m = len(X)\n",
        "X = np.concatenate((np.ones((m, 1)), X), axis=1)\n",
        "#print(X.shape)\n",
        "#print(y.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AcrnuQikUSQE"
      },
      "source": [
        "Here, the input $x^{(i)}\\in\\mathbb{R^2}$ and $y^{(i)}\\in\\{-1, 1\\}$. Like we have mentioned, it is better to visualize the data first before we start working on it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EWu_JnqjUSQF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "a22fb64c-92c8-4344-fd0c-0da05e4fd970"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(X[np.where(y==1), 1], X[np.where(y==1), 2], 'rx')\n",
        "plt.plot(X[np.where(y==-1), 1], X[np.where(y==-1), 2], 'bo')  \n",
        "plt.xlabel('x2')\n",
        "plt.ylabel('x1')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ubw2Ad2MUSQM"
      },
      "source": [
        "In the following, you need to implement logistic regression. Recall that when $y^{(i)}\\in{-1,1}$, the objective function for binary logistic regression can be expressed as:\n",
        "\\begin{equation*}\n",
        "J(\\theta) = \\frac{1}{m}\\sum_{i=1}^{m}\\log{\\left(1+e^{-y^{(i)}\\theta^Tx^{(i)}}\\right)}=-\\frac{1}{m}\\sum_{i=1}^m\\log{\\left(h_{\\theta}(y^{(i)}x^{(i)})\\right)}\n",
        "\\end{equation*}\n",
        "where the hypothesis is the **sigmoid function**: \n",
        "\\begin{equation*}\n",
        "h_\\theta(y^{(i)}x^{(i)})=\\frac{1}{1+e^{-y^{(i)}\\theta^{T}x^{(i)}}}\n",
        "\\end{equation*}\n",
        "which we have seen in class (and assignment 0). Similar to the previous section, we can minimize the objective function $J(\\theta)$ using  batch gradient descent:\n",
        "\\begin{equation*}\n",
        "\\theta_j := \\theta_j - \\alpha \\frac{1}{m}\\sum_{i=1}^{m}h_\\theta(-y^{(i)}x^{(i)})(-y^{(i)}x_j^{(i)})\n",
        "\\end{equation*}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xqd3w1jYUSQO"
      },
      "source": [
        "def sigmoid(z):\n",
        "    g  = 1/(1+np.exp(-z))\n",
        "    return g\n",
        "\n",
        "def compute_cost(X, y, theta):\n",
        "    J = 0;\n",
        "    m = y.size\n",
        "    h = sigmoid(y*np.dot(X,theta))\n",
        "    epsilon = 1e-5\n",
        "    J = -1*(1/m)*(np.sum(np.log(h)))\n",
        "    return J\n",
        "\n",
        "def compute_gradient(X, y, theta):\n",
        "    m = y.size\n",
        "    h = sigmoid(y*np.dot(X,theta))\n",
        "    gradient_=(1/m)*np.sum(sigmoid(-y*np.dot(X, theta))*X*y,axis = 0).reshape(-1,1)\n",
        "    return gradient_\n",
        "\n",
        "\n",
        "def gradient_descent_logistic(X, y, theta, alpha, num_iters):\n",
        "    m = len(y)\n",
        "    J_history = []\n",
        "    for iter in range(num_iters):\n",
        "        grad = compute_gradient(X,y,theta)\n",
        "        theta = theta + (alpha * grad)\n",
        "        pass\n",
        "        # Save the cost J in every iteration \n",
        "        J = compute_cost(X, y, theta)\n",
        "        print(J)\n",
        "        J_history.append(J)\n",
        "    \n",
        "    return theta, J_history"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JbqxwYXNUSQR"
      },
      "source": [
        "Now, fit your model, and see if it is learning."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8lZwfDtsUSQT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "878675e1-3fc4-4568-d09e-36b155c5fbe6"
      },
      "source": [
        "# Train your model.\n",
        "theta = np.zeros((X.shape[1], 1))\n",
        "alpha = 0.1;\n",
        "num_iters = 400;\n",
        "theta, J_history = gradient_descent_logistic(X, y, theta, alpha, num_iters)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.6767318709516238\n",
            "0.6612759836177738\n",
            "0.6467213868522412\n",
            "0.6330122173560181\n",
            "0.6200951054326651\n",
            "0.6079193220430319\n",
            "0.5964368590615188\n",
            "0.5856024539525343\n",
            "0.5753735694532693\n",
            "0.565710337891584\n",
            "0.5565754786361017\n",
            "0.5479341959843038\n",
            "0.5397540636253004\n",
            "0.5320049007207323\n",
            "0.5246586436612436\n",
            "0.517689216691671\n",
            "0.5110724038582442\n",
            "0.5047857241105058\n",
            "0.4988083108795615\n",
            "0.4931207970404286\n",
            "0.4877052058366674\n",
            "0.4825448480874091\n",
            "0.47762422579843516\n",
            "0.4729289421494971\n",
            "0.4684456177202448\n",
            "0.46416181273904\n",
            "0.4600659550858426\n",
            "0.45614727374678166\n",
            "0.4523957373993958\n",
            "0.4488019978002129\n",
            "0.44535733764742047\n",
            "0.44205362259850367\n",
            "0.4388832571341371\n",
            "0.43583914397384127\n",
            "0.4329146467649332\n",
            "0.43010355578324566\n",
            "0.42740005640139334\n",
            "0.4247987000975499\n",
            "0.4222943777944718\n",
            "0.4198822953346259\n",
            "0.417557950912616\n",
            "0.4153171143005741\n",
            "0.4131558077157223\n",
            "0.4110702881919316\n",
            "0.4090570313288082\n",
            "0.40711271630263857\n",
            "0.40523421203348253\n",
            "0.4034185644118437\n",
            "0.40166298449673493\n",
            "0.39996483760461843\n",
            "0.3983216332157216\n",
            "0.39673101563062574\n",
            "0.39519075531586223\n",
            "0.3936987408825787\n",
            "0.3922529716471801\n",
            "0.39085155072727046\n",
            "0.389492678630239\n",
            "0.38817464729549417\n",
            "0.38689583455468296\n",
            "0.38565469897726545\n",
            "0.3844497750715729\n",
            "0.38327966881399933\n",
            "0.38214305348125743\n",
            "0.38103866576272555\n",
            "0.3799653021318076\n",
            "0.378921815456965\n",
            "0.37790711183465897\n",
            "0.3769201476278858\n",
            "0.3759599266953023\n",
            "0.3750254977971449\n",
            "0.3741159521652402\n",
            "0.37323042122541344\n",
            "0.3723680744615167\n",
            "0.3715281174111411\n",
            "0.37070978978384656\n",
            "0.3699123636934485\n",
            "0.36913514199654346\n",
            "0.36837745673005506\n",
            "0.3676386676411173\n",
            "0.3669181608031188\n",
            "0.36621534731218414\n",
            "0.36552966205879606\n",
            "0.3648605625696431\n",
            "0.3642075279151391\n",
            "0.3635700576783891\n",
            "0.36294767098167463\n",
            "0.3623399055668146\n",
            "0.36174631692601383\n",
            "0.3611664774800467\n",
            "0.3605999758008458\n",
            "0.3600464158757649\n",
            "0.35950541641097494\n",
            "0.35897661017162164\n",
            "0.3584596433565388\n",
            "0.35795417500545246\n",
            "0.3574598764367555\n",
            "0.3569764307140531\n",
            "0.3565035321398041\n",
            "0.3560408857744839\n",
            "0.3555882069798088\n",
            "0.35514522098464\n",
            "0.35471166247229\n",
            "0.3542872751880217\n",
            "0.3538718115656143\n",
            "0.3534650323719397\n",
            "0.3530667063685542\n",
            "0.3526766099893788\n",
            "0.3522945270335911\n",
            "0.3519202483729106\n",
            "0.35155357167250495\n",
            "0.3511943011247944\n",
            "0.3508422471954714\n",
            "0.3504972263810946\n",
            "0.3501590609776562\n",
            "0.34982757885955074\n",
            "0.3495026132684144\n",
            "0.34918400261132765\n",
            "0.3488715902679089\n",
            "0.348565224405848\n",
            "0.34826475780445815\n",
            "0.3479700476858499\n",
            "0.34768095555334516\n",
            "0.3473973470367804\n",
            "0.3471190917443602\n",
            "0.34684606312074506\n",
            "0.3465781383110707\n",
            "0.34631519803061844\n",
            "0.3460571264398648\n",
            "0.34580381102465674\n",
            "0.34555514248127195\n",
            "0.3453110146061369\n",
            "0.3450713241899841\n",
            "0.34483597091624557\n",
            "0.3446048572634892\n",
            "0.3443778884117099\n",
            "0.344154972152305\n",
            "0.3439360188015665\n",
            "0.34372094111753104\n",
            "0.34350965422004065\n",
            "0.3433020755138718\n",
            "0.3430981246147949\n",
            "0.3428977232784407\n",
            "0.3427007953318475\n",
            "0.34250726660757574\n",
            "0.34231706488027847\n",
            "0.3421301198056233\n",
            "0.3419463628614649\n",
            "0.3417657272911741\n",
            "0.341588148049033\n",
            "0.3414135617476078\n",
            "0.34124190660702\n",
            "0.34107312240603505\n",
            "0.34090715043489545\n",
            "0.3407439334498255\n",
            "0.34058341562914135\n",
            "0.34042554253089935\n",
            "0.34027026105202324\n",
            "0.34011751938884927\n",
            "0.33996726699903296\n",
            "0.33981945456476415\n",
            "0.3396740339572391\n",
            "0.33953095820233853\n",
            "0.33939018144746774\n",
            "0.3392516589295106\n",
            "0.33911534694385576\n",
            "0.33898120281445493\n",
            "0.3388491848648722\n",
            "0.33871925239028705\n",
            "0.33859136563041586\n",
            "0.33846548574331686\n",
            "0.3383415747800449\n",
            "0.3382195956601256\n",
            "0.3380995121478175\n",
            "0.33798128882913353\n",
            "0.3378648910895934\n",
            "0.33775028509268207\n",
            "0.3376374377589863\n",
            "0.33752631674598493\n",
            "0.3374168904284734\n",
            "0.3373091278795917\n",
            "0.33720299885244454\n",
            "0.3370984737622824\n",
            "0.33699552366923224\n",
            "0.33689412026155297\n",
            "0.3367942358393999\n",
            "0.336695843299079\n",
            "0.33659891611777665\n",
            "0.33650342833874436\n",
            "0.3364093545569264\n",
            "0.3363166699050138\n",
            "0.3362253500399096\n",
            "0.33613537112959346\n",
            "0.3360467098403689\n",
            "0.33595934332448446\n",
            "0.33587324920811207\n",
            "0.33578840557967354\n",
            "0.3357047909785037\n",
            "0.33562238438383674\n",
            "0.3355411652041074\n",
            "0.33546111326655587\n",
            "0.3353822088071265\n",
            "0.335304432460651\n",
            "0.33522776525130665\n",
            "0.33515218858334067\n",
            "0.3350776842320533\n",
            "0.3350042343350292\n",
            "0.3349318213836112\n",
            "0.33486042821460876\n",
            "0.33479003800223184\n",
            "0.33472063425024484\n",
            "0.3346522007843335\n",
            "0.3345847217446783\n",
            "0.3345181815787264\n",
            "0.3344525650341581\n",
            "0.3343878571520404\n",
            "0.3343240432601633\n",
            "0.33426110896655176\n",
            "0.3341990401531485\n",
            "0.33413782296966316\n",
            "0.33407744382758214\n",
            "0.33401788939433474\n",
            "0.33395914658761006\n",
            "0.3339012025698215\n",
            "0.33384404474271323\n",
            "0.3337876607421052\n",
            "0.3337320384327727\n",
            "0.3336771659034561\n",
            "0.3336230314619962\n",
            "0.33356962363059456\n",
            "0.33351693114119074\n",
            "0.3334649429309573\n",
            "0.33341364813790614\n",
            "0.3333630360966051\n",
            "0.3333130963339994\n",
            "0.3332638185653382\n",
            "0.3332151926901997\n",
            "0.33316720878861517\n",
            "0.3331198571172856\n",
            "0.3330731281058928\n",
            "0.3330270123534994\n",
            "0.33298150062503384\n",
            "0.332936583847863\n",
            "0.3328922531084448\n",
            "0.3328484996490622\n",
            "0.33280531486463416\n",
            "0.33276269029960326\n",
            "0.3327206176448954\n",
            "0.332679088734953\n",
            "0.33263809554483686\n",
            "0.332597630187396\n",
            "0.33255768491050336\n",
            "0.3325182520943564\n",
            "0.33247932424884014\n",
            "0.33244089401095017\n",
            "0.3324029541422765\n",
            "0.33236549752654304\n",
            "0.3323285171672061\n",
            "0.33229200618510496\n",
            "0.33225595781616746\n",
            "0.33222036540916666\n",
            "0.3321852224235289\n",
            "0.3321505224271905\n",
            "0.3321162590945021\n",
            "0.3320824262041812\n",
            "0.332049017637309\n",
            "0.33201602737537256\n",
            "0.3319834494983491\n",
            "0.3319512781828345\n",
            "0.33191950770021006\n",
            "0.33188813241485315\n",
            "0.33185714678238315\n",
            "0.33182654534794825\n",
            "0.3317963227445482\n",
            "0.3317664736913936\n",
            "0.33173699299230086\n",
            "0.3317078755341208\n",
            "0.33167911628520264\n",
            "0.33165071029388815\n",
            "0.3316226526870411\n",
            "0.33159493866860495\n",
            "0.3315675635181929\n",
            "0.331540522589707\n",
            "0.3315138113099868\n",
            "0.33148742517748564\n",
            "0.3314613597609752\n",
            "0.3314356106982768\n",
            "0.33141017369501896\n",
            "0.3313850445234213\n",
            "0.33136021902110263\n",
            "0.3313356930899145\n",
            "0.33131146269479794\n",
            "0.33128752386266447\n",
            "0.331263872681299\n",
            "0.3312405052982859\n",
            "0.33121741791995624\n",
            "0.33119460681035684\n",
            "0.3311720682902398\n",
            "0.3311497987360723\n",
            "0.3311277945790667\n",
            "0.33110605230422985\n",
            "0.3310845684494312\n",
            "0.33106333960448925\n",
            "0.33104236241027657\n",
            "0.3310216335578432\n",
            "0.33100114978755546\n",
            "0.3309809078882531\n",
            "0.33096090469642286\n",
            "0.3309411370953882\n",
            "0.33092160201451404\n",
            "0.33090229642842806\n",
            "0.33088321735625664\n",
            "0.3308643618608752\n",
            "0.33084572704817367\n",
            "0.33082731006633614\n",
            "0.33080910810513303\n",
            "0.330791118395229\n",
            "0.3307733382075021\n",
            "0.33075576485237684\n",
            "0.33073839567916974\n",
            "0.3307212280754471\n",
            "0.3307042594663958\n",
            "0.3306874873142039\n",
            "0.3306709091174556\n",
            "0.33065452241053533\n",
            "0.3306383247630441\n",
            "0.33062231377922613\n",
            "0.33060648709740686\n",
            "0.33059084238944064\n",
            "0.3305753773601688\n",
            "0.33056008974688883\n",
            "0.33054497731883087\n",
            "0.33053003787664686\n",
            "0.3305152692519064\n",
            "0.33050066930660327\n",
            "0.33048623593267107\n",
            "0.33047196705150633\n",
            "0.3304578606135015\n",
            "0.3304439145975868\n",
            "0.3304301270107778\n",
            "0.33041649588773486\n",
            "0.33040301929032695\n",
            "0.33038969530720547\n",
            "0.33037652205338547\n",
            "0.330363497669833\n",
            "0.3303506203230612\n",
            "0.33033788820473337\n",
            "0.3303252995312721\n",
            "0.33031285254347625\n",
            "0.3303005455061445\n",
            "0.3302883767077052\n",
            "0.3302763444598531\n",
            "0.33026444709719155\n",
            "0.3302526829768828\n",
            "0.33024105047830193\n",
            "0.3302295480026991\n",
            "0.3302181739728658\n",
            "0.330206926832808\n",
            "0.33019580504742474\n",
            "0.3301848071021919\n",
            "0.33017393150285146\n",
            "0.3301631767751067\n",
            "0.3301525414643214\n",
            "0.3301420241352258\n",
            "0.330131623371626\n",
            "0.33012133777611874\n",
            "0.3301111659698119\n",
            "0.33010110659204867\n",
            "0.3300911583001365\n",
            "0.3300813197690814\n",
            "0.33007158969132516\n",
            "0.33006196677648925\n",
            "0.33005244975112064\n",
            "0.33004303735844304\n",
            "0.33003372835811245\n",
            "0.33002452152597644\n",
            "0.3300154156538369\n",
            "0.33000640954921795\n",
            "0.32999750203513634\n",
            "0.3299886919498766\n",
            "0.32997997814676927\n",
            "0.32997135949397327\n",
            "0.3299628348742615\n",
            "0.32995440318480934\n",
            "0.32994606333698856\n",
            "0.3299378142561623\n",
            "0.3299296548814842\n",
            "0.32992158416570166\n",
            "0.32991360107496076\n",
            "0.3299057045886162\n",
            "0.32989789369904143\n",
            "0.3298901674114456\n",
            "0.3298825247436895\n",
            "0.329874964726108\n",
            "0.3298674864013327\n",
            "0.32986008882411827\n",
            "0.32985277106117206\n",
            "0.3298455321909865\n",
            "0.3298383713036725\n",
            "0.32983128750079727\n",
            "0.3298242798952242\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KBz-vuy6USQX"
      },
      "source": [
        "Again, plot and check to see if the model is converging."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tI7-ve1lUSQY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "ce9be869-7748-4ece-955a-549052723b72"
      },
      "source": [
        "plt.plot(list(range(0, len(J_history))), J_history, '-b')  \n",
        "plt.xlabel('Number of iterations')\n",
        "plt.ylabel('Cost J')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FJ7vClqtUSQf"
      },
      "source": [
        "## Decision Boundary\n",
        "In addition to checking convergence graph and accuracy, we can also plot out the decision boundary to see what does the model actually learn."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HDhTGlzFUSQf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "9c11ea6e-cec0-408e-f3dc-1cf147c18f7a"
      },
      "source": [
        "\n",
        "plt.plot(X[np.where(y==1), 1], X[np.where(y==1), 2], 'rx')\n",
        "plt.plot(X[np.where(y==-1), 1], X[np.where(y==-1), 2], 'bo')\n",
        "\n",
        "x_value= np.array([np.min(X[:,1]),np.max(X[:,1])])\n",
        "y_value=-(theta[0] +theta[1]*x_value)/theta[2]\n",
        "plt.plot(x_value,y_value, \"-\", c = 'green' )\n",
        "pass\n",
        "\n",
        "plt.xlabel('x1')\n",
        "plt.ylabel('x2')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "shWKz8-hUSQi"
      },
      "source": [
        "## Regularization:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qs9SvcGsUSQj"
      },
      "source": [
        "## L2 Regularization\n",
        "Overfitting is a notorious problem in the world of machine learning. One simple way to counter this issue is to put constraints on your model weights $\\theta$, as we have discussed in class. In this section, you need to modify the the objective function to impose L2 regularization on the logistic regression:\n",
        "\\begin{equation*}\n",
        "    J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m\\log{\\left(h_{\\theta}(y^{(i)}x^{(i)})\\right)} + \\lambda\\vert\\vert\\theta\\vert\\vert_2^2\n",
        "\\end{equation*}\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8R56endnUSQp"
      },
      "source": [
        "class LogisticRegression(object):\n",
        "    \n",
        "    def __init__(self, alpha=0.1, lamb=0.1, regularization=None):\n",
        "        # setting the class attribute.\n",
        "        self.alpha = alpha                   # Set up your learning rate alpha.\n",
        "        self.lamb = lamb                     # Strength of regularization.\n",
        "        self.regularization = regularization \n",
        "        assert regularization == 'l2' or regularization == None # we only consider these two cases\n",
        "    \n",
        "    def _compute_cost(self, X, y):\n",
        "        eps = 1e-10\n",
        "        #m = len(y)\n",
        "        h = sigmoid(y*np.dot(X,self.theta))\n",
        "        if self.regularization == 'l2':\n",
        "            h = sigmoid(y*np.dot(X,self.theta))\n",
        "            J = -1*(1/m)*(np.sum(np.log(h + eps))) + self.lamb * np.square((np.linalg.norm(self.theta)))\n",
        "        else:\n",
        "            h = sigmoid(y*np.dot(X,self.theta))\n",
        "            J = -1*(1/m)*(np.sum(np.log(h + eps)))\n",
        "\n",
        "        pass\n",
        "        return J\n",
        "        \n",
        "    def _compute_gradient(self, X, y):\n",
        "        if self.regularization == 'l2':\n",
        "            grad = np.dot((-1 * y * X).T, sigmoid(-y * np.dot(X,self.theta))) + self.lamb*2*self.theta\n",
        "        else:\n",
        "            grad = np.dot((-1 * y * X).T, sigmoid(-y * np.dot(X,self.theta)))\n",
        "        pass\n",
        "        return grad\n",
        "\n",
        "    def fit(self, X, y, num_iter=5):\n",
        "        self.theta = np.zeros((X.shape[1], 1))\n",
        "        m = len(y)\n",
        "        J_history = []\n",
        "\n",
        "        for iter in range(num_iters):\n",
        "            self.theta = self.theta - (self.alpha/m) * self._compute_gradient(X,y)\n",
        "\n",
        "            J = self._compute_cost(X, y)\n",
        "            J_history.append(J)\n",
        "        pass\n",
        "\n",
        "        return J_history\n",
        "    \n",
        "    def predict(self, X):\n",
        "        y_hat = sigmoid(np.dot(X,self.theta))\n",
        "\n",
        "        return y_hat"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HvOuwb--USQr"
      },
      "source": [
        "Load the wine datasets, in which $x_j\\in\\mathbb{R}^{12}$ is different attribute for alcohol, and $y\\in\\{-1,1\\}$ is that class label (red or white wine)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AcJhvSKZUSQs"
      },
      "source": [
        "# Load dataset\n",
        "import numpy as np\n",
        "X_train = np.loadtxt(os.path.join(customized_path_to_your_data, 'data/wine_train_X.txt'))\n",
        "y_train = np.loadtxt(os.path.join(customized_path_to_your_data, 'data/wine_train_y.txt')).reshape(-1, 1)\n",
        "X_test = np.loadtxt(os.path.join(customized_path_to_your_data, 'data/wine_test_X.txt'))\n",
        "y_test = np.loadtxt(os.path.join(customized_path_to_your_data, 'data/wine_test_y.txt')).reshape(-1, 1)\n",
        "\n",
        "# X_train, mu, std = feature_normalize(X_train)\n",
        "# X_test, mu, std = feature_normalize(X_test)\n",
        "\n",
        "X_train = np.concatenate((np.ones((X_train.shape[0], 1)), X_train), axis=1)\n",
        "X_test = np.concatenate((np.ones((X_test.shape[0], 1)), X_test), axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FrVpJHEaUSQx"
      },
      "source": [
        "Now, let's train two different logistic regression models: one with, and one without regularization."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3L4_u_m5USQy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4cf5356-ef1f-44f4-d917-b585e23093f1"
      },
      "source": [
        "log_reg = LogisticRegression(alpha=0.1) # Without regularization\n",
        "log_reg_l2 = LogisticRegression(alpha=0.1, lamb=1.0, regularization='l2') # Without regularization\n",
        "\n",
        "J_history = log_reg.fit(X_train, y_train, num_iter=500)\n",
        "J_history_l2 = log_reg_l2.fit(X_train, y_train, num_iter=500)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3LbnavioUSQ2"
      },
      "source": [
        "Next, we evaluate the accuracy for each method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UUPmeq4BUSQ3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "54d56416-c973-4b36-8839-7edde143d0ad"
      },
      "source": [
        "def evaluate_accuracy(X, y, model):\n",
        "    y_pred = model.predict(X)\n",
        "    y_pred[y_pred > 0.5] = 1\n",
        "    y_pred[y_pred <= 0.5] = -1\n",
        "    return np.mean(y_pred == y)\n",
        "\n",
        "print(\"Accuracy on training set: \", evaluate_accuracy(X_train, y_train, log_reg))\n",
        "print(\"Accuracy on testing set: \", evaluate_accuracy(X_test, y_test, log_reg))\n",
        "print(\"Accuracy w/ L2 training set: \", evaluate_accuracy(X_train, y_train, log_reg_l2))\n",
        "print(\"Accuracy w/ L2 testing set: \", evaluate_accuracy(X_test, y_test, log_reg_l2))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set:  0.81375\n",
            "Accuracy on testing set:  0.8575\n",
            "Accuracy w/ L2 training set:  0.77125\n",
            "Accuracy w/ L2 testing set:  0.7725\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zHzJ9-fiUSQ6"
      },
      "source": [
        "To see the effect of regularization on $\\theta$, we can plot out each $\\theta_j$ under different $\\lambda$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ruUGI7ZbUSQ6"
      },
      "source": [
        "def plot_theta(theta, lamb):\n",
        "    \"\"\"\n",
        "    Helper function for plotting out the value of theta with respect to different lambda.\n",
        "    theta  (list): list of theta under different lambda.\n",
        "    lambda (list): list of lambda values you tried.\n",
        "    \"\"\"\n",
        "    plt.hlines(y=0, xmin=0, xmax=np.max(lamb), color='red', linewidth = 2, linestyle = '--')\n",
        "    for i in range(theta.shape[1]):\n",
        "        plt.plot(lamb, theta[:,i])\n",
        "    plt.ylabel('theta')\n",
        "    plt.xlabel('lambda')\n",
        "    plt.xscale('log')\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jdz5Fu2ecDRw"
      },
      "source": [
        "## Plot:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GrXZdXtLUSQ_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "outputId": "d0ca11fd-1a1a-4d75-b615-ca564ef505e5"
      },
      "source": [
        "lamb = [0.1, 1, 10, 100, 1000]\n",
        "theta = []\n",
        "\n",
        "for l in lamb:\n",
        "    LR = LogisticRegression(alpha= 0.1,lamb=l, regularization=\"l2\")\n",
        "    LR.fit(X_train, y_train, num_iter=500)\n",
        "    theta.append(LR.theta)\n",
        "\n",
        "plot_theta(np.array(theta), lamb)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}